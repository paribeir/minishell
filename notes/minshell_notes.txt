Minishell can be broken down into 4 parts. Usually the work is divided in the middle.

1.tokenization - take raw input and classify it (is it a word, is it a pipe....) - syntax check
2.parsing - check order of tokens, and what it will translate into (if a word comes first, its prob a command... etc); check: parsing tree (use this if we do bonus), recursive parsing (easier), bash grammar.
---
3. execution - take the interpretation of parsing and execute it (like in pipex); 
4. handle signals (heredoc!) - discuss what data structure the parsing will give to the execution. - ex. linked list*


*using a linked list, a node contains the input until it finds a pipe. Each node can have the several elements of a bash command: "command", "arguments", "variables", "options/flags", "redirections"... A linked list makes it easier to store all of this information, and it keeps the natural flow of commands being executed from left to right.

Discuss:
- In which part of the code do we open and check files/commands?
- Do we do the bonus?
- How are we freeing everything? -ex. should we do a "trash can" linked list?
